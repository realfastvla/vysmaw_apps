[vys]

# multicast address for signal messages containing available spectrum metadata;
# expected format is dotted quad IP address string
signal_multicast_address = 224.0.0.102

[vysmaw]

# Size of memory region for storing spectra retrieved via RDMA from the CBE. The
# memory region is allocated and registered for RDMA by the library. Memory
# registration affects memory management on the host, as it pins physical memory
# in the virtual address space -- too large an allocation may be detrimental to
# the application; too little, and the library may be unable to copy the data
# from the CBE when it becomes available, resulting in lost data. Note that one
# memory region of the given size will be allocated for every size of spectrum
# that is received by the client unless 'single_spectrum_buffer_pool' is true.
spectrum_buffer_pool_size = 409715200
#spectrum_buffer_pool_size = 1047152000

# Maintain a single pool containing buffers sized to accommodate the expected
# size of a spectrum.
single_spectrum_buffer_pool = true

# Minimum time that a buffer pool is not accessed before its resources will be
# reclaimed, in seconds.
spectrum_buffer_pool_min_idle_lifetime_sec = 10

# The maximum expected size in bytes of a single spectrum that the client will
# receive. Note that all spectra that exceed this size will not be sent to the
# client, regardless of the result of the client filter predicate. This value is
# ignored unless 'single_spectrum_buffer_pool' is true.
max_spectrum_buffer_size = 2048

# Limits on number of work requests to maintain on the receive queue for signal
# messages. The lower limit should be at least the number of signal messages
# that are expected to arrive in the period that it takes the vysmaw
# signal_receiver loop to service the receive queue. Unfortunately the time
# required for the aforementioned loop to complete is not known a priori, so
# some tuning of the lower limit parameter by vysmaw applications is
# expected. The upper limit is available to control resource usage in the
# InfiniBand HCA (see "signal_message_pool_overhead_factor" parameter to control
# total memory assigned to signal messages.)
signal_message_receive_min_posted = 10000
signal_message_receive_max_posted = 32000

# The number of signal messages in the registered memory region for signal
# messages is determined by the product of the
# "signal_message_receive_min_posted" parameter, the following
# "signal_message_pool_overhead_factor" value, and the size of one signal
# message (which will be close to the MTU size of the InfiniBand network). The
# value of "signal_message_pool_overhead_factor" should be based on the number
# of signal messages that are expected to be in use by the vysmaw application
# through the consumer callbacks while the vysmaw library maintains
# "signal_message_receive_min_posted" work requests for receiving signal
# messages. The value of this parameter need not be an integer, but it's minimum
# value is 1.
signal_message_pool_overhead_factor = 3

# Number of work requests on the signal message receive queue at which a
# VYSMAW_MESSAGE_SIGNAL_RECEIVE_QUEUE_UNDERFLOW message is created and sent to
# consumer queues. Ideally, this level would be zero, but as there is no signal
# available from a QP for that event, and can only be inferred by comparing the
# number of receive requests vs the number of completion queue entries, this
# level more accurately can be taken to mean that the signal receive queue depth
# is "dangerously low". A vysmaw application is in danger of missing signal
# messages when a receive queue underflow occurs.
signal_message_receive_queue_underflow_level = 100

# vysmaw clients can either connect to a (CBE) sending process (to read spectral
# data) immediately upon receipt of any signal message from that process, or
# wait until a signal message is received from the process which matches (one
# of) the client's spectrum filter(s). When 'eager_connect' is 'false', the
# connection occurs only after a spectrum filter match; set value to 'true' for
# the other behavior.
eager_connect = true

# When 'eager_connect' is true, the following sets the minimum time between
# attempts to connect to each sending process eagerly. (A value less than 0.1
# sec is ignored.
eager_connect_idle_sec = 1.0

# Control disposition of client read requests (for spectral data) after
# initiating a connection request to a sending process, but prior to that
# connection becoming ready. A value of 'true' maintains read requests that
# arrive in such intervals in a queue for processing until after the connection
# is ready; a value of 'false' will ignore those requests. Note that for fast
# data streams resulting in many client read requests, the backlog can
# accumulate very quickly, and will take some time to resolve.
preconnect_backlog = false

# Depth of message queue at which an alert message is generated
message_queue_alert_depth = 4000

# Interval at which message queue alerts are repeated, expressed as the number of
# queue messages between alert messages.
message_queue_alert_interval = 10000

# Maximum number of buffer starvation events to wait before sending a
# VYSMAW_MESSAGE_[DATA|SIGNAL]_BUFFER_STARVATION message.
#
# TODO: distinguish latency for data and signal buffers?
max_starvation_latency = 1000

# Maximum number of vys_version mismatch events to wait before sending a
# VYSMAW_MESSAGE_VERSION_MISMATCH message.
max_version_mismatch_latency = 1000

# Number of threads to handle rdma read requests
num_rdma_read_threads = 1

#
# The following are probably best left at their default values, but expert users
# may find them useful.
#

# timeout, in milliseconds, to resolve InfiniBand/RDMA route
resolve_route_timeout_ms = 1000

# timeout, in milliseconds, to resolve InfiniBand/RDMA address
resolve_addr_timeout_ms = 1000

# timeout, in seconds, to determine data server inactivity
inactive_server_timeout_sec = 43200

# interval to check for shutdown, in milliseconds
shutdown_check_interval_ms = 1000

# number of signal receive completions to acknowledge at one time, expressed as
# a part of the minimum number of posted work requests: minimum number
# acknowledged will be signal_message_receive_min_posted /
# signal_receive_min_ack_part
signal_receive_min_ack_part = 20

# maximum number of posted (uncompleted) rdma read requests (may be
# automatically reduced by hardware and/or system limitations)
rdma_read_max_posted = 1000

# rdma read request completions to acknowledge at one time
rdma_read_min_ack = 16
