[vys]

# multicast address for signal messages containing available spectrum metadata;
# expected format is dotted quad IP address string
signal_multicast_address = 224.0.0.103
[vysmaw]

# Size of memory region for storing spectra retrieved via RDMA from the CBE. The
# memory region is allocated and registered for RDMA by the library. Memory
# registration affects memory management on the host, as it pins physical memory
# in the virtual address space -- too large an allocation may be detrimental to
# the application; too little, and the library may be unable to copy the data
# from the CBE when it becomes available, resulting in lost data. Note that one
# memory region of the given size will be allocated for every size of spectrum
# that is received by the client unless 'single_spectrum_buffer_pool' is true.
spectrum_buffer_pool_size = 20971520

# Maintain a single pool containing buffers sized to accommodate the expected
# size of a spectrum.
#
# WARNING: setting this parameter to 'false' is not recommended at this time,
# as the implementation in vysmaw is incomplete.
single_spectrum_buffer_pool = true

# The maximum expected size in bytes of a single spectrum that the client will
# receive. Note that all spectra that exceed this size will not be sent to the
# client, regardless of the result of the client filter predicate. This value is
# ignored unless 'single_spectrum_buffer_pool' is true.
max_spectrum_buffer_size = 8192

# Size of memory region for storing signal messages carrying spectrum metadata
# sent from all active CBE nodes. The memory region is allocated and registered
# for InfiniBand messaging by the library. Setting the value too low will cause
# the receiver to miss signal messages. Keep in mind that every client should be
# prepared to receive _all_ such signal messages sent from every CBE node.
signal_message_pool_size = 10485760

# vysmaw clients can either connect to a (CBE) sending process (to read spectral
# data) immediately upon receipt of any signal message from that process, or
# wait until a signal message is received from the process which matches (one
# of) the client's spectrum filter(s). When 'eager_connect' is 'false', the
# connection occurs only after a spectrum filter match; set value to 'true' for
# the other behavior.
eager_connect = true

# When 'eager_connect' is true, the following sets the minimum time between
# attempts to connect to each sending process eagerly. (A value less than 0.1
# sec is ignored.
eager_connect_idle_sec = 1.0

# Control disposition of client read requests (for spectral data) after
# initiating a connection request to a sending process, but prior to that
# connection becoming ready. A value of 'true' maintains read requests that
# arrive in such intervals in a queue for processing until after the connection
# is ready; a value of 'false' will ignore those requests. Note that for fast
# data streams resulting in many client read requests, the backlog can
# accumulate very quickly, and will take some time to resolve.
preconnect_backlog = true

# Maximum depth of message queue.
max_depth_message_queue = 1000

# Overhead needed to resume data flow after message queue overflow.  Operational
# value will be limited to < max_depth_message_queue.
queue_resume_overhead = 100

# Maximum number of buffer starvation events to wait before sending a
# VYSMAW_MESSAGE_[DATA|SIGNAL]_BUFFER_STARVATION message.
#
# TODO: distinguish latency for data and signal buffers?
max_starvation_latency = 100

# Maximum number of vys_version mismatch events to wait before sending a
# VYSMAW_MESSAGE_VERSION_MISMATCH message.
max_version_mismatch_latency = 1000

#
# The following are probably best left at their default values, but expert users
# may find them useful.
#

# timeout, in milliseconds, to resolve InfiniBand/RDMA route
resolve_route_timeout_ms = 1000

# timeout, in milliseconds, to resolve InfiniBand/RDMA address
resolve_addr_timeout_ms = 1000

# timeout, in seconds, to determine data server inactivity
inactive_server_timeout_sec = 43200

# interval to check for shutdown, in milliseconds
shutdown_check_interval_ms = 1000

# maximum number of posted (uncompleted) signal receive requests (may be
# automatically reduced by hardware and/or system limitations)
signal_receive_max_posted = 10000

# signal receive completions to acknowledge at a time, expressed as a part of
# the maximum number of posted work requests: minimum number acknowledged will
# be signal_receive_max_posted / signal_receive_min_ack_part
signal_receive_min_ack_part = 10

# maximum number of posted (uncompleted) rdma read requests (may be
# automatically reduced by hardware and/or system limitations)
rdma_read_max_posted = 1000

# rdma read request completions to acknowledge at a time, expressed as a part of
# the maximum number of posted work requests: minimum number acknowledged will
# be rdma_read_max_posted / rdma_read_min_ack_part
rdma_read_min_ack_part = 10
